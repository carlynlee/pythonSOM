import sys
from numpy import *
import scipy as Sci
import scipy.linalg

import math
import datetime
import random
now = datetime.datetime.now()

execfile('som_topol_struct')
execfile('som_train_struct')
class som_map_struct:
	def __init__(self, dim, name="",topol=[],msize=mat(""),lattice="",mapshape="",labels=[],neigh="",mask=mat(""),comp_names=[],comp_norm=[]):
		self.type="som_map"
		self.neigh=neigh
		self.mask=mask
		self.name=name
		self.comp_names=comp_names
		self.comp_norm=comp_norm
		self.labels=labels
		
		if topol==[]:
			sTopol=som_topol_struct(lattice=lattice, mapshape=mapshape)
		else:
			sTopol=topol	
		
		if msize.shape[1]==0:		
			sTopol.msize=mat("0 0")
		else:
			sTopol.msize=msize
	
		codebooklen=sTopol.msize[0,1]*sTopol.msize[0,0]
		self.codebook=zeros(( codebooklen, dim) )

		for i in range(0,codebooklen):
			for j in range(0,dim):
				self.codebook[i,j]=random.random()
	
		if mask.shape[1]==0:
			self.mask=ones((dim,1))
		
		if labels==[]:
			self.labels=[''] * sTopol.msize[0,0] *  sTopol.msize[0,1]
		
		if sTopol.msize[0,0]==0 and sTopol.msize[0,1]==0:
			sTopol.msize=mat("0")

		self.topol=sTopol

		if neigh=="":
			self.neigh="gaussian"

		if name=="":
			self.name='SOM ' + now.strftime("%Y-%m-%d %H:%M")	
		
		if comp_norm==[]:
			self.comp_norm=[''] * dim

		if comp_names==[]:
			self.comp_names=[''] * dim
			for i in range(0,dim):
				self.comp_names[i]='variable ' + str(i)
			
		sTrain=som_train_struct(time=now.strftime("%Y-%m-%d %H:%M"), mask=self.mask)
		
		sTrain.algorithm=""
		sTrain.data_name=""
		sTrain.neigh="gaussian"
		sTrain.radius_ini=[]
		sTrain.radius_fin=[]
		sTrain.alpha_ini=[]
		sTrain.alpha_type="inv"
		sTrain.trainlen=[]
		
		self.trainhist=sTrain

	def print_all(self):
		print "      type: " + self.type
		print "  codebook: " + str( self.codebook.shape[0] ) + " " + str(self.codebook.shape[1])
		print "     topol:"
		print "          type: " +self.topol.type
		print "         msize: " + str(self.topol.msize)
		print "       lattice: " + self.topol.lattice
		print "         shape: " + self.topol.mapshape
		print "    labels: " + str( len(self.labels)  )
		print "     neigh: " + self.neigh
		print "      mask: " + str( self.mask.shape[0]) + " " + str( self.mask.shape[1])
		print " trainhist: " 
		print "          type: " + self.trainhist.type
		print "     algorithm: " + self.trainhist.algorithm
		print "     data_name: " + self.trainhist.data_name
		print "         neigh: " + self.trainhist.neigh
		print "          mask: " + str(self.trainhist.mask.shape[0]) + " " + str(self.trainhist.mask.shape[1])
		print "    radius_ini: " + str(self.trainhist.radius_ini)
		print "    radius_fin: " + str(self.trainhist.radius_fin)
		print "     alpha_ini: " + str(self.trainhist.alpha_ini)
		print "    alpha_type: " + self.trainhist.alpha_type
		print "      trainlen: " + str(self.trainhist.trainlen)
		print "      	 time: " + self.trainhist.time
		print "comp_names: " + str( len(self.comp_names) )
		print " comp_norm: " + str( len(self.comp_norm)  )
	

	def som_lininit(D):
		data_name=D.name
		comp_names=D.comp_names
		comp_norm=D.comp_norm
		D=D.data
		dlen=D.shape[0]
		dim=D.shape[1]

		if dlen<2:
			sys.exit("Linear map initialization requires at least two samples")
		sTopol=self.topol
		
		if len(sTopol.msize)==1:
			msize=sTopol.msize
			sTopol.msize=mat("0 0")
			sTopol.msize[0,0]=msize
			sTopol.msize[0,1]=1
	
		munits=sMap.codebook.shape[0]
		dim2=self.codebook.shape[1]
		
		if dim2!=dim:
			sys.exit("Map and data must have the same dimensions")
			
		self.trainhist.algorithm="lininit"
		self.trainhist.data_name=data_name
		
		msize=self.topol.msize
		mdim=msize.shape[1]
		munits= msize[0,0] * msize[0,1]

		nonzeromapdim=0;
		for i in range(0,mdim):
			if msize[0,i]>0:
				nonzeromapdim=nonzeromapdim+1 
		
		if dim > 1 and nonzeromapdim>1:
			A=zeros((dim,dim))
			me=zeros((1,dim))
			for i in range(0,dim):
				me[0,i]=mean(D[:,i])
				D[:,i]=D[:,i]-me[0,i]

			for i in range(0,dim):
				for j in range(0,dim):
					c= multiply(D[:,i], D[:,j]) 
					A[i,j]=sum(c)/c.shape[0]
					A[j,i]=A[i,j]

			S,V=linalg.eig(A)
			eigval=S
			ind=argsort(-1*eigval)
			eigval=eigval[ind,:]
			V=V[ind,:]
		
		
		
		
			
